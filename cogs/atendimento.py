import discord,os,asyncio
from discord.ext import commands
from discord import app_commands,utils
from datetime import datetime
from cogs.owner import getdonoid,getmensagemerro
from dotenv import load_dotenv

#GET INFO USO
donoid = getdonoid()
mensagemerro = getmensagemerro()

#CARREGA E LE O ARQUIVO .env na raiz
load_dotenv(os.path.join(os.path.dirname(__file__), '.env')) #load .env da raiz


#VARIAVEIS NECESSARIAS
#Parte do Braixen's House
id_cargo_atendente = int(os.getenv("id_cargo_atendente")) #Coloque aqui o ID do cargo de atendente do primeiro servidor
id_categoria_staff = int(os.getenv("id_categoria_staff")) #Coloque aqui o ID da caregoria onde deseja que os tickets sejam criados (para primeiro servidor)
id_servidor_bh = int(os.getenv("id_servidor_bh")) #ID do primeiro servidor
id_canal_logs_bh = int(os.getenv("id_canal_logs_bh")) #ID do canal de logs do primeiro servidor
id_canal_avaliacao = int(os.getenv("id_canal_avaliacao")) #ID do canal para envio das avalia√ß√µes


#Parte do Segundo servidor
id_cargo_tribunal = int(os.getenv("id_cargo_tribunal")) #Coloque aqui o ID do cargo de atendente do segundo servidor
id_categoria_tribunal = int(os.getenv("id_categoria_tribunal")) #Coloque aqui o ID da caregoria onde deseja que os tickets sejam criados (para Segundo servidor)
id_servidor_tribunal= int(os.getenv("id_servidor_tribunal")) #ID do segundo servidor
id_canal_logs_tri= int(os.getenv("id_canal_logs_tri")) #ID do canal de logs do segundo servidor


#Variaveis de USO GLOBAL| Se Quiser editar s√≥ edite o emojiglobal blz, o resto deixe do jeito que est√°
emojiglobal = "ü¶ä"
tipoticket = "1"
staff = "1"
mensagemcanal = "1"
categoriadeatendimento = "1"
botname = "1"
botavatar = "1"

#PAINEIS DE USO NAS COMUNIDADES
#PAINEL SUPORTE BRAIXEN HOUSE
class suporte_bh(discord.ui.Select): #a class aqui recebeu o nome de Dropdown para cada classe tem que ter Nomes diferentes viu nos proximos voc√™ vai ver que eu mudei
    def __init__(self):
        options = [ #Op√ß√µes do dropdown (Aqui s√£o listadas todas as op√ß√µes do menu pode adicionar ou remover se necessario) divirta-se
            
            #Ajuda adicional Value(condi√ß√£o para buscar resposta no Callback)| Label (texto que ser√° exibido no menu no chat do discord) | Emoji (√© s√≥ o emoji)
            
            discord.SelectOption(value="duvidas",label="D√∫vidas sobre temas gerais.", emoji="‚ÅâÔ∏è"),
            discord.SelectOption(value="denuncia",label="Fa√ßa uma Den√∫ncia.", emoji="üö®"),
            discord.SelectOption(value="bugs",label="informe um bug no servidor.", emoji="üêû"),
            discord.SelectOption(value="solicitacao",label="Solicita√ß√µes de cargos ou convers√µes.", emoji="üîî"),
            discord.SelectOption(value="premiacao",label="Resgatar um pr√™mio de evento.", emoji="üéÅ"),
            discord.SelectOption(value="vip",label="Compre seu vip.", emoji="üåü"),
            discord.SelectOption(value="sugestao",label="Envie uma sugest√£o.", emoji="üí°"),
            discord.SelectOption(value="parceria",label="Desejo divulgar no Braixen's House.", emoji="ü§ù"),
            discord.SelectOption(value="Staff",label="Vire um Staff no Braixen's House.", emoji="üíº"),
            discord.SelectOption(value="foxcloud",label="Estado do nosso servidor.", emoji="üñ•Ô∏è"),
            discord.SelectOption(value="outros",label="Nenhuma das op√ß√µes acima.", emoji="ü¶ä"),
        ]
        super().__init__(
            placeholder="Selecione uma op√ß√£o...", #Placeholder exibe um texto padr√£o quando n√£o √© selecionado nada pelo usuario
            min_values=1,
            max_values=1,
            options=options,
            custom_id="persistent_view:dropdown_help" #a ID do seu Dropdown | Importante caso tenha mais de 1 viu pois voc√™ tem que editar ele
        )
    async def callback(self, interaction: discord.Interaction): #Retorno do que foi selecionado no menu Dropdown
        # global = to puxando variaveis de fora do codigo para editar elas aqui, s√£o as que est√£o na linha 5 a 19
        global emojiglobal #Puxa a variavel emoji global para editar posteriormente
        global tipoticket #Puxa a variavel do tipo de ticket para editar posteriormente
        global staff #Puxa a variavel staff para editar posteriormente
        global mensagemcanal #Puxa a variavel de mensagem do canal para editar posteriormente
        global categoriadeatendimento #Puxa a categoria de atendimento para editar posteriormente

        #Abaixo s√£o as condi√ß√µes elas v√£o usar o VALUE para entrar em uma condi√ß√£o
        if self.values[0] == "duvidas": # < puxo o valor selecionado e verifico se ele √© igual a duvidas se sim ele roda a condi√ß√£o, se n√£o ele vai para as proximas.
            emojiglobal = "‚ÅâÔ∏è" #definindo o emoji antes "1" para o ‚ÅâÔ∏è
            tipoticket = "Ticket de d√∫vidas" #definindo o tipo de ticket
            staff = id_cargo_atendente #indicando qual √© o staff para esse ticket
            mensagemcanal = "1" #define mensagem do canal | nesse aqui n√£o √© usado ent√£o eu deixei padr√£o 1 em outros voc√™ ver√° que ter√° isso.
            categoriadeatendimento = id_categoria_staff #definindo a categoria de atendimento onde ele deve criar o ticket
            await interaction.response.send_message("**D√∫vidas Gerais?** \n\nSabia que temos um canal exclusivo onde voc√™ pode ser ajudado por todos. \nTodas as d√∫vidas est√£o centralizadas em <#1027376614054576138> e voc√™ pode pesquisar l√° dentro, se n√£o tiver sua d√∫vida voc√™ mesmo pode postar l√° e aguardar algu√©m te responder.",ephemeral=True) #resposta para a intera√ß√£o texto padr√£o com o ephemeral ativado (ephemeral √© aquelas mensagem que s√≥ o proprio membro ve)
    # Daqui para baixo e copia e cola mudando as variaveis, lembre-se as op√ß√µes aqui devem iniciar primeiro com um if (linha 74) e depois tudo com elif blz, e a quantidade de op√ß√µes aqui deve ser igual ao dropdown l√° em cima, cada dropdown l√° tem que ter uma condi√ß√£o aqui.
    # o CreateTicket √© o bot√£o de abertura de ticket, aqui puxamos ele mas o codigo dele ta l√° em baixo perdido.
        elif self.values[0] == "denuncia":
            emojiglobal = "üö®"
            tipoticket = "Ticket de Den√∫ncias"
            staff = id_cargo_atendente
            mensagemcanal = "**Para a sua den√∫ncia por favor escreva detalhadamente o acontecimento e envia captura de tela ou anexo como prova da sua denuncia, agilize seu atendimento enviando agora mesmo as informa√ß√µes.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja den√∫ciar algu√©m?** \n\nPara **den√∫nciar** algu√©m por favor tenha em maos **motivo da den√∫ncia, autor (usuario ou ID) e provas.** \n\nPara prosseguir com sua den√∫ncia abra o ticket abaixo.",ephemeral=True,view=CreateTicket())
      
        elif self.values[0] == "bugs":
            emojiglobal = "üêû"
            tipoticket = "Ticket de Bugs e Problemas"
            staff = id_cargo_atendente
            mensagemcanal = "**Envie uma captura de tela do seu bug aqui neste canal e nos conte como voc√™ encontrou esse bug para que possamos resolver.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Encontrou um bug em nosso servidor?** \n\nPara reportar um bug em nosso servidor tenha em m√£os o **maximo de detalhes** sobre o bug relatado, inclua **capturas de tela** e **descreva detalhadamente.** \nAbra o ticket com o bot√£o abaixo.",ephemeral=True,view=CreateTicket())
        
        elif self.values[0] == "solicitacao":
            emojiglobal = "üîî"
            tipoticket = "Ticket de Solicita√ß√µes"
            staff = id_cargo_atendente
            mensagemcanal = "**Adiante seu atendimento enviando as informa√ß√µes da sua solicita√ß√£o, assim que o atendente chegar ele j√° resolve seu caso imediatamente.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Solicita√ß√µes?** \n\nVoc√™ pode solicitar por varios servi√ßos como por exemplo: \n\n*Mudan√ßas no servidor.* \n*Novos cargos. *\n*Novas Categorias.* \n*Novos Canais.* \n\nAbra o ticket com o bot√£o abaixo.",ephemeral=True,view=CreateTicket())

        elif self.values[0] == "premiacao":
            emojiglobal = "üéÅ"
            tipoticket = "Ticket de Retirada de Pr√™mios"
            staff = id_cargo_atendente
            mensagemcanal = "**adiante seu atendimento informando qual √© o pr√™mio que voc√™ deseja retirar assim que o atendente chegar ele j√° sabe do que se trata.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Ganhou um Pr√™mio?** \n\nRetire aqui mesmo seu pr√™mio de eventos realizados e que sejam entregues pelo Braixen's House. \nAbra o ticket com o bot√£o abaixo.",ephemeral=True,view=CreateTicket())
        
        elif self.values[0] == "sugestao":
            emojiglobal = "üí°"
            tipoticket = "Ticket de Sugest√µes"
            staff = id_cargo_atendente
            mensagemcanal = "1"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Sugest√µes?** \n\nSabia que temos um canal exclusivo para o envio de sugest√µes. \nTodas as S√∫gest√µes est√£o centralizadas no <#1027376614054576138> voc√™ pode filtrar sua busca ou escrever uma do zero, mas seja bastante detalhista em sua sugest√£o blz.",ephemeral=True)
        
        elif self.values[0] == "parceria":
            emojiglobal = "ü§ù"
            tipoticket = "Ticket de divulga√ß√µes"
            staff = id_cargo_atendente
            mensagemcanal = "O Braixen's House est√° sujeito a avalia√ß√£o de requisitos e a possiveis cobran√ßas pela sua divulga√ß√£o. \n\nNesta Modalidade **todas as parcerias** precisam ser feitas em conjunto com um **sorteio** pois ser√° dessa forma que iremos efetuar **sua divulga√ß√£o.**\n*Adiante seu atendimento enviando o link do seu servidor para fazermos a analise dele*"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja divulgar algo no Braixen's House?** \nPara **divulgar seu servidor, bot ou outros projetos.**\nO *Braixen's House* pode **te ajudar com isso** mas estamos **sujeito a avalia√ß√£o de requisitos** e a possiveis **cobran√ßas pela sua divulga√ß√£o**. \n\nNesta Modalidade **todas as parcerias** precisam ser feitas em conjunto com um **sorteio** pois ser√° dessa forma que iremos efetuar **sua divulga√ß√£o.**\n**Visite o Canal** de <#982990181307142174> e **confir√° os topicos 2 e 3** que informamos com detalhes como **funciona e como avaliamos**.\n\n **N√£o abra o ticket sem ler sobre nosso protocolo.**",ephemeral=True,view=CreateTicket())
        
        elif self.values[0] == "Staff":
            emojiglobal = "üíº"
            tipoticket = "Ticket de Formul√°rio staff"
            staff = id_cargo_atendente
            mensagemcanal = "1"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja fazer parte do time Braixen's house?** \n\nSabia que temos um formul√°rio para quem est√° interessado em se tornar um staff voc√™ pode abrir ele e verificar se estamos aceitando novos formul√°rios, Olha ta aqui o link: \nhttps://docs.google.com/forms/d/e/1FAIpQLSeZGFDS7g5oiaFV6lE2KiErLCAQXazW3SY9tieWeT5zrlOF5g/viewform?usp=sf_link",ephemeral=True)

        elif self.values[0] == "vip":
            emojiglobal = "üåü"
            tipoticket = "Ticket de Compra de vip"
            staff = id_cargo_atendente
            mensagemcanal = "**J√° sabe qual plano vai querer? se n√£o visite <#971011814324334602> e escolha seu plano e depois volte aqui.**\n\n **Adiante seu atendimento indicando se deseja comprar por sonhos ou por Tails coin e o plano desejado.** \n Compras por tails coin use o comando T!pagar Valor @domembro"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja Comprar seu Vip?** \n\nPara comprar seu vip mensal abra um ticket com o bot√£o abaixo.\n\n*Sabia que voc√™ pode comprar a assinatura vital√≠cia diretamente pela loja do Tails usando `T!buy 1` super simples e f√°cil* ",ephemeral=True,view=CreateTicket())

        
        elif self.values[0] == "foxcloud":
            emojiglobal = "üñ•Ô∏è"
            tipoticket = "Ticket de servi√ßos Foxcloud"
            staff = id_cargo_atendente
            mensagemcanal = "**adiante seu atendimento enviando seu problema incluindo captura de tela, assim que o atendente chegar ele j√° sabe do que se trata.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Problemas com o servidor FoxCloud?** \n\n*J√° conhece nossos varios servi√ßos?* \nconsulte todos em <#970376187606097980>. \n\nCaso voc√™ tenha dificuldades de acesso aos servi√ßos ou percebeu que um de nossos bots est√° offline, verifique se j√° avisamos em <#888567677784829982> ou no nosso canal de <#1009948353251004557>\ncaso n√£o tenhamos informado nada por favor abra um ticket abaixo",ephemeral=True,view=CreateTicket())
       
        elif self.values[0] == "outros":
            emojiglobal = "ü¶ä"
            tipoticket = "Ticket de Outros Motivos"
            staff = id_cargo_atendente
            mensagemcanal = "**Por favor descreva o motivo do seu contato, assim que o atendente chegar ele j√° sabe do que se trata.**"
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**N√£o tem sua Quest√£o?** \n\nN√£o tem problema, por favor crie um ticket clicando no bot√£o abaixo",ephemeral=True,view=CreateTicket())

# UFAAA, se chegou at√© aqui seu primeiro painel j√° est√° quase configurado eu acho, daqui para baixo √© mais coisa importante viu.

#PAINEIS PERSISTENTES 
# Isso aqui √© importante, essa parte aqui indica que os paineis que criamos devem ser pesistentes, ent√£o toda vez que voc√™ reiniciar seu bot e j√° tiver um painel criado ele automaticamente puxa o j√° existente, assim voc√™ n√£o precisa criar um novo toda vez blz.
# CADA DROPDOWN deve receber um custom_id diferente ent√£o elas s√£o diferentes para n√£o confundir esse cara aqui, se elas forem iguais vai bugar esse cara

#PAINEl PERSISTENTES SUPORTE BRAIXEN HOUSE
class DropdownSuporte(discord.ui.View): # Olha a classe aqui, ela √© diferente das l√° de cima blz.
    def __init__(self): #n√£o me pergunta pq eu n√£o sei oque √© s√≥ coloca que precisa.
        super().__init__(timeout=None) #isso aqui define o tempo que o painel vai expirar, nesse caso none √© NUNCAAAAA.
        self.add_item(suporte_bh())#isso aqui eu to falando que ele vai adicionar o dropdown de novo em caso de reinicio.

# PAINEL CONTRATA√á√ÇO BRAIXEN HOUSE
# PAINEL DE CONTRATA√á√ÇO TAMB√âM PARA O PRIMEIRO SERVIDOR, MESMAS COISAS DO PRIMEIRO S√í MUDA VARIAVEL

class contratacao_bh(discord.ui.Select): # Olha a classe aqui antes a outra era Dropdown, pela minha falta de criatividade vai Dropdown2
    def __init__(self):
        options = [#Op√ß√µes do dropdown| mesma pegada do outro porem com op√ß√µes diferentes e bem menor rsrsrsr
            discord.SelectOption(value="bots",label="Quero desenvolver meu proprio bot.", emoji="ü§ñ"),
            discord.SelectOption(value="servidor",label="Quero montar um servidor.", emoji="üõ°Ô∏è"),
            discord.SelectOption(value="outros",label="Outras Solicita√ß√µes.", emoji="üåê"),
        ]
        super().__init__(
            placeholder="Selecione uma op√ß√£o...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="persistent_view:dropdown_sevice" #OUUUUUU lembra disso aqui, cada dropdown tem sua propria ID para n√£o ter erro, compare com o de cima e veja a diferen√ßa
        )
    async def callback(self, interaction: discord.Interaction): #Retorno sele√ß√£o Dropdown do painel de contrata√ß√£o
        #mesma coisa do de cima, Puxando variaveis para usar e editar rsrsrs
        global emojiglobal
        global tipoticket
        global staff
        global mensagemcanal
        global categoriadeatendimento

            #mesmo esquema de condi√ß√£o do de l√° de cima blz define as coisas, verifica o values e responde
        if self.values[0] == "bots":
            emojiglobal = "ü§ñ"
            tipoticket = "Ticket de Desenvolvimento de Bots"
            staff = id_cargo_atendente
            mensagemcanal = "Conte para a gente como voc√™ deseja o seu bot? se j√° tem alguma coisa fale sobre ela para que possamos te ajudar."
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja ter seu proprio bot?** \n\npois bem o Braixen tem alguns conhecimentos e √© bem prov√°vel que ele tenha uma solu√ß√£o para voc√™.\n\nabre um ticket ai para ele te ajudar.",ephemeral=True,view=CreateTicket())
       
        elif self.values[0] == "servidor":
            emojiglobal = "üíª"
            tipoticket = "Ticket de Montagem de Servidores"
            staff = id_cargo_atendente
            mensagemcanal = "Voc√™ j√° tem uma ideia de como deseja seu servidor? qual tema ele ir√° abordar? escreva aqui para a gente saber e poder te ajudar."
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**Deseja ajuda para montar seu proprio servidor?** \n\no Braixen oferece o servi√ßo de montagem de servidores que inclui **planejamento** e **implanta√ß√£o** de toda a estrutura e configura√ß√£o de bots populares.\n\no Valor inicial dos servi√ßos √© de R$ 40,00 Reais. \n*podendo haver acrecimos com base no tamanho do projeto* \n\n**N√£o aceitamos pagamento** em Sonhos, Foxcoin ou qualquer outra moeda de bot.",ephemeral=True,view=CreateTicket())
        elif self.values[0] == "outros":
            emojiglobal = "üåê"
            tipoticket = "Ticket de Outras Solicita√ß√µes"
            staff = id_cargo_atendente
            mensagemcanal = "Conta para a gente oque voc√™ deseja solicitar de servi√ßo."
            categoriadeatendimento = id_categoria_staff
            await interaction.response.send_message("**N√£o tem sua solicita√ß√£o listada?** \n\nN√£o se preocupe, crie um ticket assim mesmo.",ephemeral=True,view=CreateTicket())


#PAINEL PERSISTENTE CONTRATA√á√ÇO BRAIXEN HOUSE - IGUAL O DE CIMA MAS PUXA O CONTRATA√á√ÇO
class DropdownContratacao(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(contratacao_bh())

# PAINEL DO TRIBUNAL PARA O SEGUNDO SERVIDOR | esse √© usado no segundo servidor blz mas √© copia e cola dos outros s√≥ mudando as variaveis.
class tribunal_bh(discord.ui.Select): # CLASSEE EDITADA DE NOVOOOOOO BIRL Dropdown3 agora
    def __init__(self):
        options = [#Op√ß√µes do dropdown qe v√£o aparecer no dropdown
            discord.SelectOption(value="questionar",label="Quero questionar meu ban.", emoji="üî®"),
            discord.SelectOption(value="duvidas",label="Tenho d√∫vidas sobre meu ban.", emoji="‚ùì"),
            discord.SelectOption(value="regras",label="D√∫vidas sobre as regras.", emoji="üìã"),
        ]
        super().__init__(
            placeholder="Selecione uma op√ß√£o...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="persistent_view:dropdown_tribunal" #Olha a porra da ID aqui de novo e ela ta diferente viuuuu lembra disso que vamos usar depois
        )
    async def callback(self, interaction: discord.Interaction): #Retorno sele√ß√£o Dropdown do painel do tribunal

        #(CTRL+V) mesma coisa do de cima, Puxando variaveis para usar e editar rsrsrs
        global emojiglobal
        global tipoticket
        global staff
        global mensagemcanal
        global categoriadeatendimento
        
        # Aqui √© igualzinho aos outros, s√≥ muda as condi√ß√µes ü§ô
        if self.values[0] == "questionar":
            emojiglobal = "üî®"
            tipoticket = "Ticket de Questionamento de Banimento"
            staff = id_cargo_tribunal
            mensagemcanal = "Por favor escreva no chat o horario que voc√™ foi banido e passe a sua ID de usuario ou seu Discord Tag."
            categoriadeatendimento = id_categoria_tribunal
            await interaction.response.send_message("**Deseja Questionar o seu banimento?** \n\nSe voc√™ foi banido do Braixen's House e acredita que seu banimento tenha sido injusto.\n\nabre um ticket ai e vamos revisar o seu caso.",ephemeral=True,view=CreateTicket())
       
        elif self.values[0] == "duvidas":
            emojiglobal = "‚ùì"
            tipoticket = "Ticket de D√∫vidas"
            staff = id_cargo_tribunal
            mensagemcanal = "nada"
            categoriadeatendimento = id_categoria_tribunal
            await interaction.response.send_message("**Est√° com d√∫vidas sobre o seu banimento?** \n\nBom todos os registros do Braixen's House est√£o dispon√≠vels de forma replicada neste servidor, no Canal <#1046777277582692393>.\n\nCaso voc√™ n√£o entenda o motivo do seu banimento abra a op√ß√£o de Questionar seu banimento e vamos exclarecer a todas as suas d√∫vidas.",ephemeral=True)
        
        elif self.values[0] == "regras":
            emojiglobal = "üìã"
            tipoticket = "Ticket de Outras Solicita√ß√µes"
            staff = id_cargo_tribunal
            mensagemcanal = "nada"
            categoriadeatendimento = id_categoria_tribunal
            await interaction.response.send_message("**Voc√™ tem d√∫vidas sobre as regras?** \n\nN√£o se preocupe, todas elas est√£o em <#1046764161398493340>.",ephemeral=True)



#PAINEL PERSISTENTE TRIBUNAL BRAIXEN HOUSE - igualzinho, mas puxa o tribunal
class DropdownTribunal(discord.ui.View):
    def __init__(self): 
        super().__init__(timeout=None)
        self.add_item(tribunal_bh())


#BOT√îES DOS PAINEIS DE ATENDIMENTO
#BOT√ÇO CRIAR TICKET
#lembra do bot√£o que puxamos l√° em cima em um monte de op√ß√£o, ele ta aquiiii
class CreateTicket(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)
        self.value=None

     # visual do bot√£o aqui, label √© o texto que vai estar no bot√£o| Style √© a cor, consulte a documenta√ß√£o pois tem cores especificas | Emoji √© o emoji do bot√£o
    @discord.ui.button(label="Abrir Ticket",style=discord.ButtonStyle.blurple,emoji="ü¶ä")
    async def ticket(self,interaction: discord.Interaction, button: discord.ui.Button):
        global emojiglobal
        global staff
        global categoriadeatendimento
        self.value = True
        self.stop()
        ticket = None
                #Embed do ticket depois de apertar o bot√£o
        embedticket = discord.Embed(
            colour=discord.Color.yellow(),
            description=f"*Atendimento: {tipoticket}*\nResponsavel: <@&{staff}>"
        )
        #a linha a baixo foi comentada pois o bot de teste n√£o tinha avatar
        #embedticket.set_author(name=f"{botname}",icon_url=f"{botavatar}")
        embedticket.set_thumbnail(url="https://i.imgur.com/ixqtABY.png")
        embedticket.set_footer(text="Voc√™ pode usar `/atendimento fechar` para encerrar o atendimento!")
                
                #comando para abrir canal normal
                #aqui defino novas condi√ß√µes para ser usado na verifica√ß√£o desse codigo.
        atendente = interaction.guild.get_role(staff)
        categoria = interaction.guild.get_channel(categoriadeatendimento)
        #a op√ß√£o abaixo eu procuro nos canais se o membro j√° tem um ticket na op√ß√£o que ele escolheu
        ticket = utils.get(interaction.guild.text_channels, name =  f"{emojiglobal}‚îÉ{interaction.user.name.lower().replace(' ', '-')}-{interaction.user.id}")
        if ticket is not None: #verifica se ticket n√£o √© none,  
            await interaction.response.send_message(f"Eiiii, voc√™ j√° tem esse tipo de atendimento aberto. \n\nolha seu Ticket aqui {ticket.mention}! <:hmph:969703406048526417>", ephemeral=True)
            await ticket.send(f"Por favor Continue nesse ticket {interaction.user.mention}!")
            await ticket.send("<:braixyou:1045138554021478420>")
        else: #caso contrario ele continua criando ticket
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False,send_messages=True,attach_files=True,use_application_commands=True),
                interaction.user: discord.PermissionOverwrite(read_messages=True,send_messages=True,use_application_commands=True),
                atendente: discord.PermissionOverwrite(read_messages=True,send_messages=True,use_application_commands=True)
            }
            ticket = await interaction.guild.create_text_channel(f"{emojiglobal}‚îÉ{interaction.user.name}-{interaction.user.id}",category=categoria,overwrites=overwrites)
            await interaction.response.send_message(ephemeral=True,content=f"<:BraixHappy2:988776437790158918> Criei um ticket para voc√™! Acessa ele ai e boa sorte <:BraixThumbsub:976096456987508817>\n{ticket.mention}")
            await ticket.send(f"Avisando:<@{interaction.user.mention}>",embed=embedticket)
            await ticket.purge(limit=1)
            await ticket.send(embed=embedticket)
            async with ticket.typing():
                await asyncio.sleep(1.5)
            await ticket.send(f"Oiiie {interaction.user.mention} **Tudo bem?**")
            async with ticket.typing():
                await asyncio.sleep(1.0)
            await ticket.send(f"Seja muito bem-vindo(a) ao atendimento do **Braixen's House**!! <:BN:416595378956271626> ")
            async with ticket.typing():
                await asyncio.sleep(1.5)
            await ticket.send(f"**sinta-se a vontade para usar os bots aqui no chat**")
            async with ticket.typing():
                await asyncio.sleep(1.5)
            await ticket.send(f"e daqui a pouco voc√™ ser√° **atendido** por um <@&{staff}>.")
            async with ticket.typing():
                await asyncio.sleep(1.5)
            await ticket.send(f"mas em quanto o atendente n√£o chega eu mesmo vou assumir seu atendimento aqui por enquanto!!!")
            async with ticket.typing():
                await asyncio.sleep(1.5)
            await ticket.send(f"{mensagemcanal}")


#Bot√£o deletar ticket
class DeleteTicket(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)
        self.value=None

    @discord.ui.button(label="Encerrar Ticket",style=discord.ButtonStyle.red,emoji="ü¶ä")#ESPECIFICA√á√ÇO DO BOT√ÇO
    async def confirm(self,interaction: discord.Interaction, button: discord.ui.Button):
        self.value = True
        self.stop()
        # puxo os mods de ambos os servidores para fazer a verifica√ß√£o logo abaixo
        mod = interaction.guild.get_role(id_cargo_atendente)
        mod2 = interaction.guild.get_role(id_cargo_tribunal)

        # esse IF verifica se quem ta apertando o bot√£o ou √© o cara que abriu o ticket ou o mod do primeiro servidor ou do segundo servidor.
        if str(interaction.user.id) in interaction.channel.name or mod in interaction.user.roles or mod2 in interaction.user.roles:
            #se √© verdadeiro encerra o atendimento e deleta o ticker
                await interaction.channel.send(f"<a:BraixPet:969397249169842237>")
                await interaction.response.defer()
                await interaction.followup.send(f"Okay estamos salvando o seu atendimento e fechando ele...\nAtendimento fechado por: {interaction.user.name} - {interaction.user.id}")
                if os.path.exists(f"{interaction.channel.id}.md"):
                    return await interaction.followup.send(f"Uma transcri√ß√£o j√° est√° sendo gerada!", ephemeral = True)
                with open(f"{interaction.channel.id}.md", 'a',encoding="utf-8") as f:
                    f.write(f"# Hist√≥rico de {interaction.channel.name}:\n\n")
                    async for message in interaction.channel.history(limit = None, oldest_first = True):
                        created = datetime.strftime(message.created_at, "%d/%m/%Y √°s %H:%M:%S")
                        if message.edited_at:
                            edited = datetime.strftime(message.edited_at, "%d/%m/%Y √°s %H:%M:%S")
                            f.write(f"{message.author} on {created}: {message.clean_content} (Editado em {edited})\n")
                        else:
                            f.write(f"{message.author} on {created}: {message.clean_content}\n")
                    generated = datetime.now().strftime("%d/%m/%Y √°s %H:%M:%S")
                    f.write(f"\n*Gerado em {generated}\n*Time Zone: UTC*")
                with open(f"{interaction.channel.id}.md", 'rb') as f:
                    if interaction.guild.id == id_servidor_bh:
                        canal_logs = interaction.guild.get_channel(id_canal_logs_bh)
                    else:
                        canal_logs = interaction.guild.get_channel(id_canal_logs_tri)
                    await canal_logs.send(file = discord.File(f, f"{interaction.channel.name}.md"))
                os.remove(f"{interaction.channel.id}.md")
                await interaction.channel.delete()
        else:
            # se falso manda isso ai em baixo
            await interaction.response.send_message(mensagemerro)


#INICIO DA CLASSE
class atendimento(commands.Cog):
    def __init__(self, client: commands.Bot) -> None:

        #Aqui estou criando uma variavel global para usar em outra 
        global botname
        global botavatar
        self.client = client
        botname = self.client.user.name
        botavatar = self.client.user.avatar

        #Carrega os menu e adiciona eles
        self.menu_atendimento = app_commands.ContextMenu(name="Abrir Atendimento",callback=self.abrirticketmenu)
        self.client.tree.add_command(self.menu_atendimento)
        self.client.add_view(DropdownSuporte())  #carrega o Painel de Suporte
        self.client.add_view(DropdownContratacao()) #carrega o painel de contrata√ß√£o
        self.client.add_view(DropdownTribunal()) #carrega o painel de tribunal


    @commands.Cog.listener()
    async def on_ready(self):
        print("Cog atendimento carregado.")
    
    #Remove os menu se necessario
    async def cog_unload(self) -> None:
        self.client.tree.remove_command(self.menu_atendimento, type=self.menu_atendimento.type)
  
    #COMANDO ABRIR ATENDIMENTO MENU
    async def abrirticketmenu(self,interaction: discord.Interaction,membro: discord.Member):
        print (f"Usuario: {interaction.user.name} usou Abrir Ticket")
        await interaction.response.defer(ephemeral=True)
        if interaction.guild.id == id_servidor_bh:
            atendente = interaction.guild.get_role(id_cargo_atendente)
            categoria = interaction.guild.get_channel(id_categoria_staff)
        elif interaction.guild.id == id_servidor_tribunal:
            atendente = interaction.guild.get_role(id_cargo_tribunal)
            categoria = interaction.guild.get_channel(id_categoria_tribunal)
        else:
            await interaction.followup.send(ephemeral=True, content="<:ew:969703224825225266> Ue? Isso n√£o funcionou como deveria... \nEsse comando √© de uso exclusivo da staff nas comunidades Braixen's House <:derp:969703169670131812>")
            return
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False,send_messages=True,attach_files=True,use_application_commands=True),
            interaction.user: discord.PermissionOverwrite(read_messages=True,send_messages=True),
            membro: discord.PermissionOverwrite(read_messages=True,send_messages=True),
            atendente: discord.PermissionOverwrite(read_messages=True,send_messages=True)
        }
        if atendente in interaction.user.roles:
            ticket = await interaction.guild.create_text_channel(f"ü¶ä‚îÉ{membro.name}-{membro.id}",overwrites=overwrites,category=categoria)
            await interaction.followup.send(ephemeral=True,content=f"Criei um ticket para voc√™! Acessa ele ai \n{ticket.mention}")
            embedticket = discord.Embed(
                colour=discord.Color.yellow(),
                #title="Atendimento Braixen's House",
                description=f"**Ol√° {membro.mention}**, Bem-vindo(a) ao nosso atendimento.\n\nEsse Ticket foi aberto **diretamente pela adminstra√ß√£o do servidor** a fim de resolver algum problema com voc√™ ent√£o pedimos que **aguarde a nossa equipe conversar com voc√™.**"
            )
            embedticket.set_author(name=f"{self.client.user.name}",icon_url=f"{self.client.user.avatar.url}")
            embedticket.set_thumbnail(url="https://i.imgur.com/ixqtABY.png")
            await ticket.send(f"Esse Ticket foi aberto pelo administrador {interaction.user.mention} para realizar o atendimento exclusivo do membro {membro.mention}\n\n",embed=embedticket)
        else:
            await interaction.followup.send(ephemeral=True,content=mensagemerro)


    #GRUPO PAINEIS DE ATENDIMENTO DO BOT 
    painel=app_commands.Group(name="painel",description="Comandos de paineis de atendimento do bot.")

        #PAINEL DE SUPORTE DO BRAIXEN'S HOUSE
    @painel.command(name = 'suporte-bh', description='ü¶ä‚†ÇCrie um Menu para atendimento de suporte')
    @commands.has_permissions(manage_guild=True)
    async def suportebh(self,interaction: discord.Interaction):
        print (f"Usuario: {interaction.user.name} usou painel suporte")
        embed1 = discord.Embed(
            colour=discord.Color.yellow(),
            title="Atendimento Braixen's House",
            description="Seja bem-vindo(a) a nossa **se√ß√£o de ajuda** do **Braixen's House.** \n \nAqui voc√™ pode tirar d√∫vidas, pedir ajuda para alguns problemas, solicitar cargos, informar sobre problemas de acesso, sugest√µes de mudan√ßas entre outros basta selecionar a op√ß√£o desejada."
        )
        embed1.set_image(url="https://cdn.discordapp.com/attachments/1067789510097768528/1146086873501028513/atendimento.png")
        if interaction.user.id == donoid:
            await interaction.response.send_message("Painel criado",ephemeral=True)
            await interaction.channel.send(embed=embed1,view=DropdownSuporte()) 
        else:await interaction.response.send_message(mensagemerro,ephemeral=True)


        #PAINEL DE SERVI√áOS DO BRAIXEN'S HOUSE
    @painel.command(name = 'servicos-bh', description='ü¶ä‚†ÇCrie um Menu para atendimento de servi√ßos.')
    @commands.has_permissions(manage_guild=True)
    async def contatebh(self,interaction: discord.Interaction):
        print (f"Usuario: {interaction.user.name} usou painel servi√ßos")
        embed2 = discord.Embed(
            colour=discord.Color.yellow(),
            title="Contrata√ß√£o Braixen's House",
            description="Seja bem-vindo(a) a nossa **se√ß√£o de contrate** do **Braixen's House.** \n \nAqui voc√™ pode Contratar os meus servi√ßos de Braixen para **Consultoria, Planejamento, Desenvolvimento** de servidores e **Implanta√ß√£o** de bots, e tamb√©m os servi√ßos dos artistas de nossa comunidade.\n\nEnt√£o caso esteja interessado **abre um ticket ai**."
        )
        #imagem do meu embed
        embed2.set_image(url="https://cdn.discordapp.com/attachments/1067789510097768528/1146086918895964260/contrate.png")
        if interaction.user.id == donoid:
            await interaction.response.send_message("Painel criado",ephemeral=True)
            await interaction.channel.send(embed=embed2,view=DropdownContratacao())
        else:await interaction.response.send_message(mensagemerro,ephemeral=True)


        #PAINEL DO TRIBUNAL DO BRAIXEN'S HOUSE
    @painel.command(name = 'tribunal', description='ü¶ä‚†ÇCrie um Menu para atendimento do tribunal.')
    @commands.has_permissions(manage_guild=True)
    async def tribunalbh(self,interaction: discord.Interaction):
        print (f"Usuario: {interaction.user.name} usou painel tribunal")
        embed3 = discord.Embed(
            colour=discord.Color.yellow(),
            title="Tribunal Braixen's House",
            description="Seja bem-vindo(a) ao **Tribunal** do **Braixen's House.** \n \nAqui voc√™ pode verificar e contestar banimentos e avisos que aconteceram no Braixen's House.\n\n**Aten√ß√£o** n√£o abra ticket sem motivo, caso contrario poderemos ignorar sua solicita√ß√£o."
        )
        #imagem do meu embed
        embed3.set_image(url="https://cdn.discordapp.com/attachments/1067789510097768528/1146086949057208410/tribunal.png")
        if interaction.user.id == donoid:
            await interaction.response.send_message("Painel criado",ephemeral=True)
            await interaction.channel.send(embed=embed3,view=DropdownTribunal()) 
        else:await interaction.response.send_message(mensagemerro,ephemeral=True)



    #GRUPO DE ATENDIMENTO DO BOT 
    atendi=app_commands.Group(name="atendimento",description="Comandos de paineis de atendimento do bot.")

    #COMANDO PARA FECHAR UM TICKET
    #esse cara manda um texto e manda junto o bot√£o de fechar ticket 
    @atendi.command(name="fechar",description='üìû‚†ÇFeche um atendimento.')
    async def fecharticket(self,interaction: discord.Interaction):
        print (f"Usuario: {interaction.user.name} usou fecharticket")
        mod = interaction.guild.get_role(id_cargo_atendente)
        mod2 = interaction.guild.get_role(id_cargo_tribunal)
        if str(interaction.user.id) in interaction.channel.name or mod in interaction.user.roles or mod2 in interaction.user.roles:
            await interaction.response.send_message("<:BraixThink:969396723631939594> **Voc√™ deseja mesmo Encerrar seu atendimento?")
            await asyncio.sleep(1.5)
            await interaction.followup.send("Caso sim, use o bot√£o abaixo.",view=DeleteTicket())
        else:
            await interaction.response.send_message(mensagemerro,ephemeral=True)

        #COMANDO DE ENVIO DE OBRIGADO
        #esse aqui manda um obrigado ao membro da equipe do servidor, reconhece automaticamente com base na id no canal.
    @atendi.command(name='encerrar', description='üìû‚†ÇEncerre um atendimento.')
    async def encerrar(self,interaction: discord.Interaction):
        print (f"Usuario: {interaction.user.name} usou obg atendimento")
        mod = interaction.guild.get_role(id_cargo_atendente)
        mod2 = interaction.guild.get_role(id_cargo_tribunal)
        membro_id = interaction.channel.name.split('-')[-1]
        membro = interaction.guild.get_member(int(membro_id))
        if str(interaction.user.id) in interaction.channel.name or mod in interaction.user.roles or mod2 in interaction.user.roles:
            await interaction.response.send_message("enviando mensagem...",ephemeral=True)
            async with interaction.channel.typing():
                    await asyncio.sleep(1.5)
            await interaction.channel.send(f"Ol√° novamente {membro.mention}!!!")
            async with interaction.channel.typing():
                    await asyncio.sleep(2)
            await interaction.channel.send(f"Parece que seu atendimento est√° chegando ao fim.")
            async with interaction.channel.typing():
                    await asyncio.sleep(2)
            await interaction.channel.send(f"O *Braixen's House* agradece o contato e esperamos que voc√™ n√£o tenha ficado com nenhuma d√∫vida sobre sua solicita√ß√£o. <:BraixHappy2:988776437790158918>")
            async with interaction.channel.typing():
                    await asyncio.sleep(2)
            await interaction.channel.send(f"Voc√™ pode **avaliar o seu atendimento** usando o comando </atendimento avaliar:1138614448840511577>.")
            async with interaction.channel.typing():
                    await asyncio.sleep(2)
            await interaction.channel.send(f"Por favor use o **comando** </atendimento fechar:1138614448840511577> para **finalizar seu atendimento**")
        else:
            await interaction.response.send_message(mensagemerro,ephemeral=True)

        #COMANDO PARA ADICIONAR ALGUEM A ALGUM ATENDIMENTO
    #esse aqui adiciona um novo membro ao atendimento atual e notifica no chat que foi adicionado
    @atendi.command(name="adicionar",description='üìû‚†ÇAdicione um membro ao atendimento.')
    @app_commands.describe(membro="informe um membro")
    async def adicionar(self,interaction: discord.Interaction,membro: discord.Member):
        print (f"Usuario: {interaction.user.name} usou add atendimento")
        mod = interaction.guild.get_role(id_cargo_atendente)
        mod2 = interaction.guild.get_role(id_cargo_tribunal)
        if str(interaction.user.id) in interaction.channel.name or mod in interaction.user.roles or mod2 in interaction.user.roles:
            resposta = discord.Embed(
                colour=discord.Color.green(),
                title="ü¶ä‚îÉAdicionado ao atendimento",
                description=f"Membro: {membro.mention} foi adicionado ao atendimento"
            )
            await interaction.response.send_message(embed=resposta)
            await interaction.channel.set_permissions(membro, read_messages=True,send_messages=True)
        else:
            await interaction.response.send_message(mensagemerro,ephemeral=True)


        #COMANDO PARA REMOVER ALGUEM A ALGUM ATENDIMENTO
        #esse aqui remove um membro do atendimento atual e notifica no chat que foi removido
    @atendi.command(name="remover",description='üìû‚†ÇRemove um membro do atendimento.')
    @app_commands.describe(membro="informe um membro")
    async def remover(self,interaction: discord.Interaction,membro: discord.Member):
        print (f"Usuario: {interaction.user.name} usou rem atendimento")
        mod = interaction.guild.get_role(id_cargo_atendente)
        mod2 = interaction.guild.get_role(id_cargo_tribunal)
        if str(interaction.user.id) in interaction.channel.name or mod in interaction.user.roles or mod2 in interaction.user.roles:
            resposta = discord.Embed(
                colour=discord.Color.red(),
                title="ü¶ä‚îÉRemoveu do atendimento",
                description=f"Membro: {membro.mention} foi removido do atendimento"
            )
            await interaction.response.send_message(embed=resposta)
            await interaction.channel.set_permissions(membro, read_messages=False,send_messages=False)
        else:
            await interaction.response.send_message(mensagemerro,ephemeral=True)


                #COMANDO PARA AVALIAR O ATENDIMENTO
            #esse comando permite que o membro envie uma avalia√ß√£o sobre o atendimento, o membro pode escolher o staff, indicar a nota, e adicionar um comentario, as avalia√ß√µes s√£o registradas no canal de avalia√ß√£o.
    @atendi.command(name="avaliar",description='üìû‚†ÇAvalie seu atendimento na nossa comunidade.')
    @app_commands.describe(staff="informe um membro da staff para avaliar",nota="selecione uma nota para o staff",comentario="escreva um comentario adicional.")
    @app_commands.choices(nota=[app_commands.Choice(name="1", value="1"),app_commands.Choice(name="2", value="2"),app_commands.Choice(name="3", value="3"),app_commands.Choice(name="4", value="4"),app_commands.Choice(name="5", value="5"),])
    async def avaliar(self,interaction: discord.Interaction,staff: discord.Member, nota:app_commands.Choice[str],comentario:str):
        print (f"Usuario: {interaction.user.name} usou avaliar atendimento")
        canal_avaliacao = interaction.guild.get_channel(id_canal_avaliacao)
        if (nota.value == '1'):
            estrelas = "ü¶ä"
        elif (nota.value == '2'):
            estrelas = "ü¶äü¶ä"
        elif (nota.value == '3'):
            estrelas = "ü¶äü¶äü¶ä"
        elif (nota.value == '4'):
            estrelas = "ü¶äü¶äü¶äü¶ä"
        elif (nota.value == '5'):
            estrelas = "ü¶äü¶äü¶äü¶äü¶ä"
    
        resposta = discord.Embed(
                colour=discord.Color.yellow()
            )
        resposta.set_thumbnail(url=staff.avatar.url)
        resposta.add_field(name="```ü¶ä``` Staff", value=f"```{staff.name}#{staff.discriminator}```", inline=True)
        resposta.add_field(name="```‚≠ê``` Nota", value=f"```{estrelas}```", inline=True)
        resposta.add_field(name="```üó®Ô∏è``` coment√°rio", value=f"```{comentario}```", inline=False)
        resposta.set_footer(text=f"avalia√ß√£o enviada por {interaction.user.name}#{interaction.user.discriminator}")
        await canal_avaliacao.send(embed=resposta)
        await interaction.response.send_message("Recebemos sua avalia√ß√£o ebaaa <:BraixHappy2:988776437790158918> muito obrigado viu <:Braixen_Kyu:984628502450016286>",ephemeral=True)

    #Comando usado para criar uma entrevista
    @atendi.command(name="entrevista",description='üìû‚†ÇCrie uma entrevista no servidor')
    async def _entrevista(self,interaction: discord.Interaction,membro: discord.Member,dia: str, horario: str):
        if interaction.user.id == donoid:
            await interaction.response.send_message("Criando seu canal de entrevistas...",ephemeral=True)
            atendente = interaction.guild.get_role(id_cargo_atendente)
            categoria = interaction.guild.get_channel(id_categoria_staff)
            overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False,send_messages=True,attach_files=True,use_application_commands=True),
            interaction.user: discord.PermissionOverwrite(read_messages=True,send_messages=True),
            membro: discord.PermissionOverwrite(read_messages=True,send_messages=True),
            atendente: discord.PermissionOverwrite(read_messages=True,send_messages=False)
            }
            entrevista = await interaction.guild.create_text_channel(f"ü¶ä‚îÉ{dia}-{horario} - {membro.name}",overwrites=overwrites,category=categoria)
            generated = datetime.now().strftime("%m/%Y")
            embed = discord.Embed(
                colour=discord.Color.yellow(),
                #title="Atendimento Braixen's House",
                description=f"**Ol√° {membro.mention}**, Bem-vindo(a) ao canal de entrevista.\n\nEsse canal ser√° usado para realizar sua  **entrevista** lembre-se ela est√° agendada para o **dia {dia}/{generated} √°s {horario}**, pe√ßo que aguarde o Braixen entrar em contato com voc√™ nesse horario para iniciar a sua entrevista."
            )
            embed.set_author(name=f"{botname}",icon_url=f"{botavatar}")
            embed.set_thumbnail(url="https://i.imgur.com/ixqtABY.png")
            await entrevista.send(f"Esse canal foi aberto pelo administrador {interaction.user.mention} para realizar a entrevista do {membro.mention}\n\n",embed=embed)
        
        else: await interaction.response.send_message(mensagemerro,ephemeral=True)


async def setup(client:commands.Bot) -> None:
  await client.add_cog(atendimento(client))
